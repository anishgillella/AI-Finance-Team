/**
 * Semantic Models - Comprehensive Financial Query Patterns
 * 50+ SQL patterns covering all complexity levels for the Finance Agent
 */

export interface SemanticModel {
  id: string;
  name: string;
  description: string;
  sql: string;
  tables: string[];
  operations: string[];
  use_cases: string[];
  complexity: "simple" | "intermediate" | "complex" | "advanced";
  text: string; // For embeddings
}

export const SEMANTIC_MODELS: SemanticModel[] = [
  // ==================== SIMPLE QUERIES (COUNT, BASIC SELECT) ====================
  {
    id: "s_user_count",
    name: "Total Users",
    description: "Count total number of users",
    sql: `SELECT COUNT(*) as total_users FROM users`,
    tables: ["users"],
    operations: ["COUNT"],
    use_cases: ["user_statistics", "summary"],
    complexity: "simple",
    text: "Count total users in the system",
  },
  {
    id: "s_account_count",
    name: "Total Accounts",
    description: "Count total number of accounts",
    sql: `SELECT COUNT(*) AS total_accounts FROM accounts`,
    tables: ["accounts"],
    operations: ["COUNT"],
    use_cases: ["account_statistics"],
    complexity: "simple",
    text: "Count total accounts in the system",
  },
  {
    id: "s_transaction_count",
    name: "Total Transactions",
    description: "Count total financial transactions",
    sql: `SELECT COUNT(*) as total_transactions FROM transactions`,
    tables: ["transactions"],
    operations: ["COUNT"],
    use_cases: ["activity_summary"],
    complexity: "simple",
    text: "Count total transactions in database",
  },
  {
    id: "s_securities_count",
    name: "Total Securities",
    description: "Count available securities",
    sql: `SELECT COUNT(*) as total_securities FROM securities`,
    tables: ["securities"],
    operations: ["COUNT"],
    use_cases: ["market_overview"],
    complexity: "simple",
    text: "Count total securities available",
  },
  {
    id: "s_accounts_list",
    name: "All Accounts",
    description: "List all accounts with basic info",
    sql: `SELECT id, account_name, account_type, balance, currency FROM accounts LIMIT 100`,
    tables: ["accounts"],
    operations: ["SELECT", "LIMIT"],
    use_cases: ["account_browse"],
    complexity: "simple",
    text: "View list of all accounts",
  },
  {
    id: "s_recent_transactions",
    name: "Recent Transactions",
    description: "Get last 50 transactions",
    sql: `SELECT id, transaction_date, transaction_type, amount, category FROM transactions ORDER BY transaction_date DESC LIMIT 50`,
    tables: ["transactions"],
    operations: ["SELECT", "ORDER BY", "LIMIT"],
    use_cases: ["activity_log"],
    complexity: "simple",
    text: "View recent financial transactions",
  },
  {
    id: "s_top_securities",
    name: "Top Securities by Market Cap",
    description: "Get top 10 securities by market cap",
    sql: `SELECT ticker, name, security_type, market_cap FROM securities ORDER BY market_cap DESC LIMIT 10`,
    tables: ["securities"],
    operations: ["ORDER BY", "LIMIT"],
    use_cases: ["market_leaders"],
    complexity: "simple",
    text: "Find top securities by market capitalization",
  },
  {
    id: "s_highest_accounts",
    name: "Highest Account Balances",
    description: "Get top 10 accounts by balance",
    sql: `SELECT account_name, account_type, balance, currency FROM accounts ORDER BY balance DESC LIMIT 10`,
    tables: ["accounts"],
    operations: ["ORDER BY", "LIMIT"],
    use_cases: ["top_accounts"],
    complexity: "simple",
    text: "View accounts with highest balances",
  },

  // ==================== INTERMEDIATE QUERIES (GROUP BY, AGGREGATION) ====================
  {
    id: "m_accounts_by_type",
    name: "Accounts by Type",
    description: "Group accounts by type with counts",
    sql: `SELECT account_type, COUNT(*) as count, SUM(balance) as total_balance FROM accounts GROUP BY account_type ORDER BY count DESC`,
    tables: ["accounts"],
    operations: ["GROUP BY", "COUNT", "SUM"],
    use_cases: ["account_analysis"],
    complexity: "intermediate",
    text: "Analyze account distribution by type with totals",
  },
  {
    id: "m_spending_by_category",
    name: "Spending by Category",
    description: "Analyze spending patterns by category",
    sql: `SELECT category, COUNT(*) as transaction_count, SUM(amount) as total_spent, AVG(amount) as avg_amount FROM transactions WHERE category IS NOT NULL GROUP BY category ORDER BY total_spent DESC`,
    tables: ["transactions"],
    operations: ["GROUP BY", "COUNT", "SUM", "AVG", "WHERE"],
    use_cases: ["spending_analysis"],
    complexity: "intermediate",
    text: "Get spending breakdown by category with statistics",
  },
  {
    id: "m_transactions_by_type",
    name: "Transactions by Type",
    description: "Group transactions by type",
    sql: `SELECT transaction_type, COUNT(*) as count, SUM(amount) as total_amount, AVG(amount) as avg_amount FROM transactions GROUP BY transaction_type ORDER BY count DESC`,
    tables: ["transactions"],
    operations: ["GROUP BY", "COUNT", "SUM", "AVG"],
    use_cases: ["transaction_analysis"],
    complexity: "intermediate",
    text: "Analyze transaction distribution by type",
  },
  {
    id: "m_securities_by_sector",
    name: "Securities by Sector",
    description: "Group securities by sector",
    sql: `SELECT sector, COUNT(*) as security_count, AVG(market_cap) as avg_market_cap FROM securities WHERE sector IS NOT NULL GROUP BY sector ORDER BY security_count DESC`,
    tables: ["securities"],
    operations: ["GROUP BY", "COUNT", "AVG", "WHERE"],
    use_cases: ["sector_analysis"],
    complexity: "intermediate",
    text: "Analyze securities distribution across sectors",
  },
  {
    id: "m_budget_status",
    name: "Budget Status Overview",
    description: "Get budget tracking with spending progress",
    sql: `SELECT category, limit_amount, spent_amount, ROUND((spent_amount::decimal / limit_amount * 100), 2) as percent_used FROM budgets ORDER BY percent_used DESC`,
    tables: ["budgets"],
    operations: ["SELECT", "ROUND", "ORDER BY"],
    use_cases: ["budget_tracking"],
    complexity: "intermediate",
    text: "View budget status with spending percentages",
  },
  {
    id: "m_portfolio_value",
    name: "Total Portfolio Value",
    description: "Calculate total portfolio value by account",
    sql: `SELECT account_id, COUNT(*) as holding_count, SUM(market_value) as total_value, AVG(market_value) as avg_holding_value FROM portfolio_holdings GROUP BY account_id ORDER BY total_value DESC`,
    tables: ["portfolio_holdings"],
    operations: ["GROUP BY", "COUNT", "SUM", "AVG"],
    use_cases: ["portfolio_analysis"],
    complexity: "intermediate",
    text: "Calculate portfolio values and statistics by account",
  },
  {
    id: "m_dividend_summary",
    name: "Dividend Summary by Account",
    description: "Sum dividends received by account",
    sql: `SELECT account_id, COUNT(*) as dividend_count, SUM(total_amount) as total_dividends, AVG(amount_per_share) as avg_dividend FROM dividends GROUP BY account_id ORDER BY total_dividends DESC`,
    tables: ["dividends"],
    operations: ["GROUP BY", "COUNT", "SUM", "AVG"],
    use_cases: ["dividend_tracking"],
    complexity: "intermediate",
    text: "Analyze dividend income by account",
  },
  {
    id: "m_over_budget",
    name: "Over Budget Categories",
    description: "Find categories exceeding budget",
    sql: `SELECT category, limit_amount, spent_amount, (spent_amount - limit_amount) as overage FROM budgets WHERE spent_amount > limit_amount ORDER BY overage DESC`,
    tables: ["budgets"],
    operations: ["WHERE", "ORDER BY"],
    use_cases: ["budget_alerts"],
    complexity: "intermediate",
    text: "Identify budget categories that exceeded limits",
  },

  // ==================== COMPLEX QUERIES (JOINS, MULTIPLE TABLES) ====================
  {
    id: "c_user_account_summary",
    name: "User Account Summary",
    description: "Join users with accounts",
    sql: `SELECT u.email, u.name, a.account_name, a.account_type, a.balance FROM users u LEFT JOIN accounts a ON u.id = a.user_id ORDER BY u.email, a.account_type LIMIT 100`,
    tables: ["users", "accounts"],
    operations: ["LEFT JOIN", "ORDER BY", "LIMIT"],
    use_cases: ["user_profile"],
    complexity: "complex",
    text: "View user details with their associated accounts",
  },
  {
    id: "c_portfolio_with_securities",
    name: "Portfolio Holdings with Security Details",
    description: "Join holdings with security information",
    sql: `SELECT ph.id, s.name, s.ticker, s.security_type, ph.quantity, ph.current_price, ph.market_value FROM portfolio_holdings ph LEFT JOIN securities s ON ph.security_id = s.id ORDER BY ph.market_value DESC LIMIT 100`,
    tables: ["portfolio_holdings", "securities"],
    operations: ["LEFT JOIN", "ORDER BY", "LIMIT"],
    use_cases: ["portfolio_overview"],
    complexity: "complex",
    text: "Show portfolio holdings with full security details",
  },
  {
    id: "c_transactions_with_accounts",
    name: "Transactions with Account Details",
    description: "Join transactions with account info",
    sql: `SELECT t.transaction_date, t.transaction_type, t.amount, t.category, a.account_name, a.account_type FROM transactions t LEFT JOIN accounts a ON t.account_id = a.id ORDER BY t.transaction_date DESC LIMIT 100`,
    tables: ["transactions", "accounts"],
    operations: ["LEFT JOIN", "ORDER BY", "LIMIT"],
    use_cases: ["transaction_history"],
    complexity: "complex",
    text: "View transactions with associated account information",
  },
  {
    id: "c_transaction_securities",
    name: "Transactions with Securities",
    description: "Join transactions with security info",
    sql: `SELECT t.transaction_date, t.transaction_type, s.name, s.ticker, t.quantity, t.price_per_unit, t.amount FROM transactions t LEFT JOIN securities s ON t.security_id = s.id WHERE t.security_id IS NOT NULL ORDER BY t.transaction_date DESC LIMIT 100`,
    tables: ["transactions", "securities"],
    operations: ["LEFT JOIN", "WHERE", "ORDER BY", "LIMIT"],
    use_cases: ["security_transactions"],
    complexity: "complex",
    text: "Track security transactions with full details",
  },
  {
    id: "c_portfolio_performance",
    name: "Portfolio Performance Analysis",
    description: "Calculate gain/loss on holdings",
    sql: `SELECT s.name, s.ticker, ph.quantity, ph.average_cost, ph.current_price, (ph.current_price - ph.average_cost) as gain_per_share, ROUND(((ph.current_price - ph.average_cost) / ph.average_cost * 100), 2) as percent_gain FROM portfolio_holdings ph LEFT JOIN securities s ON ph.security_id = s.id ORDER BY percent_gain DESC`,
    tables: ["portfolio_holdings", "securities"],
    operations: ["LEFT JOIN", "ORDER BY"],
    use_cases: ["performance_tracking"],
    complexity: "complex",
    text: "Analyze portfolio performance with gains and losses",
  },
  {
    id: "c_price_history_analysis",
    name: "Price History with Securities",
    description: "Analyze price trends",
    sql: `SELECT s.name, s.ticker, ph.history_date, ph.open_price, ph.close_price, ph.high_price, ph.low_price, (ph.close_price - ph.open_price) as daily_change FROM price_history ph LEFT JOIN securities s ON ph.security_id = s.id ORDER BY ph.history_date DESC LIMIT 100`,
    tables: ["price_history", "securities"],
    operations: ["LEFT JOIN", "ORDER BY", "LIMIT"],
    use_cases: ["price_analysis"],
    complexity: "complex",
    text: "Track price movements with daily changes",
  },
  {
    id: "c_dividend_with_securities",
    name: "Dividends with Security and Account",
    description: "Join dividends with securities and accounts",
    sql: `SELECT d.payment_date, s.name, s.ticker, d.amount_per_share, d.total_amount, a.account_name FROM dividends d LEFT JOIN securities s ON d.security_id = s.id LEFT JOIN accounts a ON d.account_id = a.id ORDER BY d.payment_date DESC LIMIT 100`,
    tables: ["dividends", "securities", "accounts"],
    operations: ["LEFT JOIN", "ORDER BY", "LIMIT"],
    use_cases: ["dividend_tracking"],
    complexity: "complex",
    text: "View dividend payments with security and account details",
  },
  {
    id: "c_user_financial_goals",
    name: "User Financial Goals",
    description: "Join users with their goals",
    sql: `SELECT u.email, u.name, fg.goal_name, fg.goal_type, fg.target_amount, fg.current_amount, ROUND((fg.current_amount::decimal / fg.target_amount * 100), 2) as percent_achieved, fg.target_date FROM users u LEFT JOIN financial_goals fg ON u.id = fg.user_id ORDER BY u.email, fg.target_date`,
    tables: ["users", "financial_goals"],
    operations: ["LEFT JOIN", "ORDER BY"],
    use_cases: ["goal_tracking"],
    complexity: "complex",
    text: "Track user financial goals with progress",
  },

  // ==================== ADVANCED QUERIES (MULTIPLE JOINS, AGGREGATIONS) ====================
  {
    id: "a_account_portfolio_summary",
    name: "Account with Portfolio Summary",
    description: "Combine account balance with portfolio value",
    sql: `SELECT a.account_name, a.account_type, a.balance as cash_balance, COALESCE(SUM(ph.market_value), 0) as portfolio_value, (a.balance + COALESCE(SUM(ph.market_value), 0)) as total_assets FROM accounts a LEFT JOIN portfolio_holdings ph ON a.id = ph.account_id GROUP BY a.id, a.account_name, a.account_type, a.balance ORDER BY total_assets DESC`,
    tables: ["accounts", "portfolio_holdings"],
    operations: ["LEFT JOIN", "GROUP BY", "SUM", "COALESCE"],
    use_cases: ["wealth_summary"],
    complexity: "advanced",
    text: "Calculate total assets combining cash and portfolio",
  },
  {
    id: "a_user_wealth_analysis",
    name: "User Wealth Analysis",
    description: "Complete user wealth breakdown",
    sql: `SELECT u.email, u.name, COUNT(DISTINCT a.id) as account_count, SUM(a.balance) as total_cash, COALESCE(SUM(ph.market_value), 0) as portfolio_value, (SUM(a.balance) + COALESCE(SUM(ph.market_value), 0)) as net_worth FROM users u LEFT JOIN accounts a ON u.id = a.user_id LEFT JOIN portfolio_holdings ph ON a.id = ph.account_id GROUP BY u.id, u.email, u.name ORDER BY net_worth DESC`,
    tables: ["users", "accounts", "portfolio_holdings"],
    operations: ["LEFT JOIN", "GROUP BY", "COUNT DISTINCT", "SUM", "COALESCE"],
    use_cases: ["wealth_analysis"],
    complexity: "advanced",
    text: "Complete wealth analysis per user",
  },
  {
    id: "a_transaction_security_performance",
    name: "Transaction History with Performance",
    description: "Track buy/sell with current pricing",
    sql: `SELECT t.transaction_date, t.transaction_type, s.name, s.ticker, t.quantity, t.price_per_unit, t.amount, s.market_cap FROM transactions t LEFT JOIN securities s ON t.security_id = s.id WHERE t.transaction_type IN ('buy', 'sell') AND t.security_id IS NOT NULL ORDER BY t.transaction_date DESC LIMIT 200`,
    tables: ["transactions", "securities"],
    operations: ["LEFT JOIN", "WHERE", "IN", "ORDER BY", "LIMIT"],
    use_cases: ["investment_tracking"],
    complexity: "advanced",
    text: "Track buy/sell transactions with security performance",
  },
  {
    id: "a_monthly_summary",
    name: "Monthly Financial Summary",
    description: "Monthly transaction and dividend summary",
    sql: `SELECT DATE_TRUNC('month', t.transaction_date)::date as month, COUNT(*) as transaction_count, SUM(CASE WHEN t.amount > 0 THEN t.amount ELSE 0 END) as income, SUM(CASE WHEN t.amount < 0 THEN ABS(t.amount) ELSE 0 END) as expenses FROM transactions t GROUP BY DATE_TRUNC('month', t.transaction_date) ORDER BY month DESC`,
    tables: ["transactions"],
    operations: ["GROUP BY", "DATE_TRUNC", "SUM", "CASE", "COUNT"],
    use_cases: ["monthly_analysis"],
    complexity: "advanced",
    text: "Generate monthly financial summary with income and expenses",
  },
  {
    id: "a_portfolio_concentration",
    name: "Portfolio Concentration Analysis",
    description: "Analyze portfolio concentration by security type",
    sql: `SELECT s.security_type, COUNT(*) as holding_count, SUM(ph.market_value) as total_value, ROUND((SUM(ph.market_value)::decimal / (SELECT SUM(market_value) FROM portfolio_holdings) * 100), 2) as percent_portfolio FROM portfolio_holdings ph LEFT JOIN securities s ON ph.security_id = s.id GROUP BY s.security_type ORDER BY percent_portfolio DESC`,
    tables: ["portfolio_holdings", "securities"],
    operations: ["LEFT JOIN", "GROUP BY", "SUM", "SUBQUERY"],
    use_cases: ["risk_analysis"],
    complexity: "advanced",
    text: "Analyze portfolio composition and concentration",
  },
  {
    id: "a_budget_vs_spending",
    name: "Budget vs Actual Spending",
    description: "Compare budgets with actual transaction spending",
    sql: `SELECT b.category, b.limit_amount, COALESCE(SUM(t.amount), 0) as actual_spent, (b.limit_amount - COALESCE(SUM(t.amount), 0)) as remaining, ROUND((COALESCE(SUM(t.amount), 0)::decimal / b.limit_amount * 100), 2) as percent_used FROM budgets b LEFT JOIN transactions t ON LOWER(b.category) = LOWER(t.category) GROUP BY b.id, b.category, b.limit_amount ORDER BY percent_used DESC`,
    tables: ["budgets", "transactions"],
    operations: ["LEFT JOIN", "GROUP BY", "SUM", "COALESCE"],
    use_cases: ["budget_analysis"],
    complexity: "advanced",
    text: "Compare budget limits with actual spending patterns",
  },
  {
    id: "a_goal_progress_tracking",
    name: "Financial Goals Progress",
    description: "Track all goals with progress metrics",
    sql: `SELECT goal_name, goal_type, target_amount, current_amount, (target_amount - current_amount) as remaining, ROUND((current_amount::decimal / target_amount * 100), 2) as percent_complete, target_date, priority, status FROM financial_goals ORDER BY priority DESC, percent_complete DESC`,
    tables: ["financial_goals"],
    operations: ["ORDER BY"],
    use_cases: ["goal_monitoring"],
    complexity: "advanced",
    text: "Monitor financial goals with progress tracking",
  },
  {
    id: "a_sector_performance",
    name: "Sector Performance Analysis",
    description: "Analyze performance by sector",
    sql: `SELECT s.sector, COUNT(DISTINCT s.id) as security_count, SUM(ph.market_value) as portfolio_value, AVG(s.market_cap) as avg_market_cap FROM portfolio_holdings ph LEFT JOIN securities s ON ph.security_id = s.id WHERE s.sector IS NOT NULL GROUP BY s.sector ORDER BY portfolio_value DESC`,
    tables: ["portfolio_holdings", "securities"],
    operations: ["LEFT JOIN", "GROUP BY", "SUM", "AVG", "COUNT DISTINCT", "WHERE"],
    use_cases: ["sector_analysis"],
    complexity: "advanced",
    text: "Analyze portfolio performance by sector",
  },
  {
    id: "a_risk_metrics",
    name: "Risk Metrics and Concentration",
    description: "Calculate portfolio risk metrics",
    sql: `SELECT COUNT(DISTINCT ph.security_id) as unique_securities, COUNT(*) as total_holdings, SUM(ph.market_value) as total_value, MIN(ph.market_value) as smallest_holding, MAX(ph.market_value) as largest_holding, ROUND((MAX(ph.market_value)::decimal / SUM(ph.market_value) * 100), 2) as largest_concentration FROM portfolio_holdings ph`,
    tables: ["portfolio_holdings"],
    operations: ["COUNT", "SUM", "MIN", "MAX"],
    use_cases: ["risk_assessment"],
    complexity: "advanced",
    text: "Calculate diversification and concentration risk metrics",
  },
];

export default SEMANTIC_MODELS;
